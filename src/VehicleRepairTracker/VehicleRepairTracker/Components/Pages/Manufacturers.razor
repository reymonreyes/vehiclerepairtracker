@page "/manufacturers"
@using Microsoft.EntityFrameworkCore
@using VehicleRepairTracker.Components.Dialogs
@using VehicleRepairTracker.Data
@using VehicleRepairTracker.Entities
@inject IDbContextFactory<DataContext> DataContext
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Manufacturers</PageTitle>
<MudPaper Elevation="0" Class="mb-6" Outlined="true">
    <MudToolBar>
        <MudText Class="mr-2"><b>Manufacturers</b></MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" OnClick="@(() => AddEdit(new Manufacturer()))">Add</MudButton>
        <MudForm>
            <MudTextField T="string" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Primary" Margin="Margin.Dense" Class="ml-4" />
        </MudForm>
    </MudToolBar>
</MudPaper>

<MudPaper Elevation="0" Class="pb-2" Outlined="true">
    <MudList Dense="true">
        @foreach (var manufacturer in _manufacturers)
        {
            <MudListItem>
                <MudIconButton OnClick="@(() => Delete(manufacturer))" Icon="@Icons.Material.Filled.Close" Size="Size.Small" Color="Color.Error" aria-label="delete"></MudIconButton>
                <MudLink Class="ml-2" OnClick="@(() => AddEdit(manufacturer))" Underline="Underline.Hover" Color="Color.Surface">@manufacturer.Name</MudLink>
            </MudListItem>
            <MudDivider />
        }
    </MudList>
</MudPaper>

@code {
    private List<Entities.Manufacturer> _manufacturers = new List<Manufacturer>();

    protected override void OnInitialized()
    {
        LoadManufacturers();
    }

    private void LoadManufacturers()
    {
        using var dbContext = DataContext.CreateDbContext();
        _manufacturers = dbContext.Manufacturers.ToList();
    }

    private async Task AddEdit(Manufacturer manufacturer)
    {
        var parameters = new DialogParameters<ManufacturerEntryFormDialog> { { x => x.Manufacturer, manufacturer } };
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<ManufacturerEntryFormDialog>("Manufacturer", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Clear();
            Snackbar.Configuration.VisibleStateDuration = 3000;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            if ((bool)result.Data == true)
                Snackbar.Add("Manufacturer updated successfully.", Severity.Success);
            else
                Snackbar.Add("An error occurred while processing the request.", Severity.Error);
        }

        LoadManufacturers();
    }

    private async void Delete(Manufacturer manufacturer)
    {
        var response = await DialogService.ShowMessageBox("Delete Manufacturer",
            (MarkupString)$"Are you sure you want to delete this manufacturer?<br/><b>{manufacturer.Name}</b>",
            yesText: "OK", cancelText: "Cancel");

        using var dbContext = DataContext.CreateDbContext();
        dbContext.Manufacturers.Remove(manufacturer);
        dbContext.SaveChanges();

        _manufacturers.Remove(manufacturer);
        StateHasChanged();

        Snackbar.Clear();
        Snackbar.Configuration.VisibleStateDuration = 3000;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Manufacturer deleted successfully.", Severity.Success);
    }
}
